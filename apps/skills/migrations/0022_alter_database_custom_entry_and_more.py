# Generated by Django 5.1.7 on 2025-03-18 19:43

import django.core.validators
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('skills', '0021_alter_database_select_database_and_more'),
    ]

    operations = [
        migrations.AlterField(
            model_name='database',
            name='custom_entry',
            field=models.CharField(blank=True, help_text='If the database you are looking for is not listed above, please enter a custom entry.e.g. Oracle', max_length=100, null=True),
        ),
        migrations.AlterField(
            model_name='database',
            name='custom_icon',
            field=models.CharField(blank=True, help_text='Please enter a custom icon for the custom entry.eg. fas fa-database', max_length=100, null=True),
        ),
        migrations.AlterField(
            model_name='database',
            name='level',
            field=models.IntegerField(default=0, help_text='Please give the technology used a level (35-100)', validators=[django.core.validators.MinValueValidator(35), django.core.validators.MaxValueValidator(100)]),
        ),
        migrations.AlterField(
            model_name='database',
            name='select_database',
            field=models.CharField(blank=True, choices=[('Mysql', 'MySQL'), ('Postgresql', 'PostgreSQL'), ('Sqlite', 'SQLite'), ('Mongodb', 'MongoDB'), ('Redis', 'Redis'), ('Mariadb', 'MariaDB'), ('Oracle', 'Oracle'), ('Sqlserver', 'SQL Server'), ('Firebase', 'Firebase'), ('Dynamodb', 'DynamoDB'), ('Cassandra', 'Cassandra'), ('Neo4j', 'Neo4j'), ('Couchdb', 'CouchDB'), ('Arangodb', 'ArangoDB'), ('Cockroachdb', 'CockroachDB'), ('Influxdb', 'InfluxDB'), ('Timescaledb', 'TimescaleDB'), ('Tidb', 'TiDB'), ('Clickhouse', 'ClickHouse'), ('Voltdb', 'VoltDB'), ('Tarantool', 'Tarantool'), ('Memcached', 'Memcached'), ('Faunadb', 'FaunaDB'), ('Supabase', 'Supabase'), ('Other', 'Other')], help_text="Please select either 'select a database from the list' or specify a custom entry.", max_length=100, null=True),
        ),
        migrations.AlterField(
            model_name='framework',
            name='custom_entry',
            field=models.CharField(blank=True, help_text='Enter a custom framework name', max_length=100, null=True),
        ),
        migrations.AlterField(
            model_name='framework',
            name='custom_icon',
            field=models.CharField(blank=True, help_text="Enter a custom icon for the framework in Font Awesome format, e.g. 'fa-brands fa-bootstrap'", max_length=100, null=True),
        ),
        migrations.AlterField(
            model_name='framework',
            name='select_framework',
            field=models.CharField(blank=True, choices=[('Django', 'Django'), ('Flask', 'Flask'), ('Fastapi', 'FastAPI'), ('Express', 'Express.js'), ('Nestjs', 'NestJS'), ('Spring', 'Spring Boot'), ('Rails', 'Ruby on Rails'), ('Laravel', 'Laravel'), ('Symfony', 'Symfony'), ('Codeigniter', 'CodeIgniter'), ('Aspnet', 'ASP.NET'), ('Dotnetcore', '.NET Core'), ('Phoenix', 'Phoenix'), ('Nextjs', 'Next.js'), ('Nuxtjs', 'Nuxt.js'), ('Sveltekit', 'SvelteKit'), ('Quasar', 'Quasar'), ('Vue', 'Vue.js'), ('Angular', 'Angular'), ('React', 'React'), ('Blazor', 'Blazor'), ('Flutter', 'Flutter'), ('Electron', 'Electron'), ('Qt', 'Qt'), ('Kivy', 'Kivy'), ('Tkinter', 'Tkinter'), ('Gtk', 'GTK'), ('Wxpython', 'wxPython'), ('Pyramid', 'Pyramid'), ('Bottle', 'Bottle'), ('Tornado', 'Tornado'), ('Cherrypy', 'CherryPy'), ('Falcon', 'Falcon'), ('Hanami', 'Hanami'), ('Play', 'Play Framework'), ('Struts', 'Struts'), ('Zend', 'Zend Framework'), ('Fuelphp', 'FuelPHP'), ('Cakephp', 'CakePHP'), ('Adonisjs', 'AdonisJS'), ('Feathersjs', 'FeathersJS'), ('Meteor', 'Meteor'), ('Hapi', 'Hapi.js'), ('Backbone', 'Backbone.js'), ('Ember', 'Ember.js'), ('Mithril', 'Mithril.js'), ('Marionette', 'Marionette.js'), ('Redwood', 'RedwoodJS'), ('Gatsy', 'Gatsby'), ('Remix', 'Remix'), ('Micro', 'Micro'), ('Aurelia', 'Aurelia'), ('Other', 'Other')], help_text="Please select either 'select a framework from the list' or specify a custom entry.", max_length=100, null=True),
        ),
        migrations.AlterField(
            model_name='programminglanguage',
            name='custom_entry',
            field=models.CharField(blank=True, help_text='Specify a custom programming language', max_length=100, null=True),
        ),
        migrations.AlterField(
            model_name='programminglanguage',
            name='custom_icon',
            field=models.CharField(blank=True, help_text="Provide a custom Font Awesome icon for the programming language, e.g., 'fa-brands fa-python'", max_length=100, null=True),
        ),
        migrations.AlterField(
            model_name='programminglanguage',
            name='level',
            field=models.IntegerField(default=0, help_text='Provide the proficiency level of the programming language (35-100)', validators=[django.core.validators.MinValueValidator(35), django.core.validators.MaxValueValidator(100)]),
        ),
        migrations.AlterField(
            model_name='programminglanguage',
            name='name',
            field=models.CharField(blank=True, choices=[('Python', 'Python'), ('Java', 'Java'), ('C', 'C'), ('Cpp', 'C++'), ('Javascript', 'JavaScript'), ('Typescript', 'TypeScript'), ('Csharp', 'C#'), ('Swift', 'Swift'), ('Kotlin', 'Kotlin'), ('Go', 'Go'), ('Rust', 'Rust'), ('Dart', 'Dart'), ('Ruby', 'Ruby'), ('Php', 'PHP'), ('R', 'R'), ('Julia', 'Julia'), ('Sql', 'SQL'), ('Plsql', 'PL/SQL'), ('Tsql', 'T-SQL'), ('Graphql', 'GraphQL'), ('Perl', 'Perl'), ('Lua', 'Lua'), ('Haskell', 'Haskell'), ('Clojure', 'Clojure'), ('Scala', 'Scala'), ('Erlang', 'Erlang'), ('Elixir', 'Elixir'), ('Fsharp', 'F#'), ('Ocaml', 'OCaml'), ('Prolog', 'Prolog'), ('Lisp', 'Lisp'), ('Scheme', 'Scheme'), ('Fortran', 'Fortran'), ('Cobol', 'COBOL'), ('Basic', 'BASIC'), ('Smalltalk', 'Smalltalk'), ('Ada', 'Ada'), ('Algol', 'ALGOL'), ('Pascal', 'Pascal'), ('Modula2', 'Modula-2'), ('Vhdl', 'VHDL'), ('Verilog', 'Verilog'), ('Jcl', 'JCL'), ('Xquery', 'XQuery'), ('Postscript', 'PostScript'), ('Bash', 'Bash'), ('Powershell', 'PowerShell'), ('Nim', 'Nim'), ('Zig', 'Zig'), ('Gams', 'GAMS'), ('Idl', 'IDL'), ('Latex', 'LaTeX'), ('Brainfuck', 'Brainfuck'), ('Whitespace', 'Whitespace'), ('Intercal', 'INTERCAL'), ('Malbolge', 'Malbolge'), ('Piet', 'Piet'), ('Befunge', 'Befunge'), ('Qsharp', 'Q#'), ('Qiskit', 'Qiskit'), ('Quipper', 'Quipper'), ('Silq', 'Silq'), ('Cirq', 'Cirq')], help_text="Please select either 'select a programming language from the list' or specify a custom entry.", max_length=100, null=True),
        ),
        migrations.AlterField(
            model_name='softskills',
            name='custom_entry',
            field=models.CharField(blank=True, help_text='You can specify a custom soft skill name', max_length=100, null=True),
        ),
        migrations.AlterField(
            model_name='softskills',
            name='custom_icon',
            field=models.CharField(blank=True, help_text='You can specify a custom font awesome icon name.eg. fas fa-database', max_length=100, null=True),
        ),
        migrations.AlterField(
            model_name='softskills',
            name='select_soft_skills',
            field=models.CharField(blank=True, choices=[('Communication', 'Communication'), ('Typewriting', 'Typewriting'), ('Teamwork', 'Teamwork'), ('Problem_solving', 'Problem Solving'), ('Critical_thinking', 'Critical Thinking'), ('Leadership', 'Leadership'), ('Adaptability', 'Adaptability'), ('Creativity', 'Creativity'), ('Time_management', 'Time Management'), ('Emotional_intelligence', 'Emotional Intelligence'), ('Conflict_resolution', 'Conflict Resolution'), ('Decision_making', 'Decision Making'), ('Work_ethic', 'Work Ethic'), ('Stress_management', 'Stress Management'), ('Negotiation', 'Negotiation'), ('Self_motivation', 'Self-Motivation'), ('Attention_to_detail', 'Attention to Detail'), ('Interpersonal_skills', 'Interpersonal Skills'), ('Active_listening', 'Active Listening'), ('Collaboration', 'Collaboration'), ('Presentation_skills', 'Presentation Skills'), ('Customer_service', 'Customer Service'), ('Other', 'Other')], help_text="Please select either 'select a soft skill from the list' or specify a custom entry.", max_length=100, null=True),
        ),
        migrations.AlterField(
            model_name='tools',
            name='custom_entry',
            field=models.CharField(blank=True, help_text='Please specify a custom tool', max_length=100, null=True),
        ),
        migrations.AlterField(
            model_name='tools',
            name='custom_icon',
            field=models.CharField(blank=True, help_text='Please specify the font awesome icon for the custom tool.eg: fas fa-code', max_length=100, null=True),
        ),
        migrations.AlterField(
            model_name='tools',
            name='select_tools',
            field=models.CharField(blank=True, choices=[('Git', 'Git'), ('Github', 'GitHub'), ('Gitlab', 'GitLab'), ('Bitbucket', 'Bitbucket'), ('Docker', 'Docker'), ('Kubernetes', 'Kubernetes'), ('Jenkins', 'Jenkins'), ('Ansible', 'Ansible'), ('Puppet', 'Puppet'), ('Chef', 'Chef'), ('Terraform', 'Terraform'), ('Vagrant', 'Vagrant'), ('Npm', 'NPM'), ('Yarn', 'Yarn'), ('Pnpm', 'PNPM'), ('Webpack', 'Webpack'), ('Babel', 'Babel'), ('Esbuild', 'ESBuild'), ('Rollup', 'Rollup'), ('Parcel', 'Parcel'), ('Gulp', 'Gulp'), ('Grunt', 'Grunt'), ('Eslint', 'ESLint'), ('Prettier', 'Prettier'), ('Sonarqube', 'SonarQube'), ('Postman', 'Postman'), ('Swagger', 'Swagger'), ('Selenium', 'Selenium'), ('Cypress', 'Cypress'), ('Jest', 'Jest'), ('Mocha', 'Mocha'), ('Chai', 'Chai'), ('Junit', 'JUnit'), ('Pytest', 'PyTest'), ('Cucumber', 'Cucumber'), ('Robotframework', 'Robot Framework'), ('Newrelic', 'New Relic'), ('Datadog', 'Datadog'), ('Prometheus', 'Prometheus'), ('Grafana', 'Grafana'), ('Splunk', 'Splunk'), ('Elk', 'ELK Stack'), ('Logstash', 'Logstash'), ('Filebeat', 'Filebeat'), ('Kibana', 'Kibana'), ('Zabbix', 'Zabbix'), ('Nagios', 'Nagios'), ('Graylog', 'Graylog'), ('Honeycomb', 'Honeycomb'), ('Jaeger', 'Jaeger'), ('Opentelemetry', 'OpenTelemetry'), ('Other', 'Other')], help_text="Please select either 'select a tool from the list' or specify a custom entry.", max_length=100, null=True),
        ),
    ]
